Эта статья входит в серию статей по улучшению производительности в .NET. Первую статью можно найти <a href="http://habrahabr.ru/post/229741/">здесь</a>.

В этой статье, как и в прошлой, будут рассмотрены неочевидные особенности в работе платформы, и приемы, с помощью которых можно с этими особенностями мирно сосуществовать. Проще говоря, тут будут записаны очередные всякие хаки из жизни нашей лавки, которые хоть немного (или много, как всегда все зависит от контекста), но экономят драгоценные ресурсы в условиях высокой нагрузки. Хаки предельно просты и не влияют на конечную функциональность. 

Открывая очередную статью о  производительности, пожалуй каждый резонно ищет ответ на вопросы "а как это может помочь в моих проектах" и "бросать ли все и начинать ли срочно исправлять свой код как описано". Исправлю ошибку прошлой статьи, отвечу сразу и подробнее.  На мой взгляд, есть смысл использовать наши хаки в следующих случаях:

<ul>
	<li>Вы  пишете новый код и решили делать это немного лучше и с экономией</li>
	<li>Вы  дошли до этапа, когда начались оптимизации и рефакторинг, поэтому просматриваете и меняете участки кода, которые выполняются очень часто</li>
 	<li>Вы  пишете высокопроизводительную систему и экономите на спичках</li>
</ul>
Я ни в коем случае не призываю вас бежать и исправлять весь код в ваших проектах. Более того, я призываю вас не делать этого, потому что это простые хаки, и скорее всего они будут вноситься бездумно в большое количество кода, а это может повлечь за собой появление новых ошибок.  Это не те хаки, которые скинут бабу с воза вашего приложения и заставят кобылу-сервак бежать в десять раз быстрее. В лучшем случае удастся выжать процентов десять. Но с миру по нитке - голому рубашка.
<habracut />
<h4>1. Сравнение строк</h4>
Многие, наверное, знают, что такое <a href="http://msdn.microsoft.com/en-us/library/system.stringcomparison(v=vs.110).aspx">StringComparison.Ordinal</a>.  Эта опция предназначена для сравнения строк без использования культур. Сравнение с помощью нее отрабатывает гораздо быстрей, чем с использованием культур, потому что для сравнения используются коды символов без дополнительных обработок. Мы уже давно используем такое сравнение во всех местах, где это возможно. Вполне ожидаемо, что на этом месте вы скажете: "Ну и что тут такого? Мы тоже делаем так же!". Но это еще не всё.

Давайте установим небольшое расширение для Visual Studio: <a href="http://visualstudiogallery.msdn.microsoft.com/24b56e51-fcc2-423f-b811-f16f3fa3af7a">Concurrency Visualizer</a>. С его помощью можно видеть работу потоков и моменты их синхронизации.

Напишем небольшой тест, который будет сравнивать строки используя культуру:
<source lang="cs">
const Int32 length = 10000;
var tasks = new Task[length];
var strings = Enumerable.Range(0, length).Select(i => Guid.NewGuid().ToString()).ToArray();

for (var i = 0; i < length; ++i)
{
	tasks[i] = Task.Run(() =>
		{
			for (var j = 0; j < length; ++j)
			{
				if (j != (length - j - 1) && String.Compare(strings[j], strings[length - j - 1], StringComparison.CurrentCulture) == 0)
					break;
			}
		});
}

Task.WaitAll(tasks);
</source>
Теперь посмотрим, что будет, если запустить проект под Concurrency Visualizer, и оставить для рассмотрения только потоки, которые занимались делом:
<img src="https://www.dropbox.com/s/19aw297smvgjwsn/Screenshot%202014-08-16%2000.40.15.png?dl=1" alt="всё плохо"/>

Если нажать Demistify и ткнуть на красные блоки, то увидим, что это - <a href="http://msdn.microsoft.com/query/dev12.query?appId=Dev12IDEF1&l=EN-US&k=k(vs.cv.threads.timeline.synchronization)%3bk(TargetFrameworkMoniker-.NETFramework%2cVersion%3dv4.5)&rd=true">остановка потока</a>, вызванная обращением к одному из примитивов синхронизации ядра.

Теперь сделаем небольшое изменение: поменяем StringComparison.CurrentCulture на StringComparison.Ordinal. Запускаем заново:
<img src="https://www.dropbox.com/s/bxxog3ve9oxrob5/Screenshot%202014-08-16%2000.34.09.png?dl=1" alt="всё хорошо"/>

Мы видим, что синхронизации нет, а есть только работа и переключение контекста. Картина для обоих случаев, конечно, меняется от запуска к запуску, но интересное не в том, что Ordinal сравнение работает быстрей (на моей машине этот тест с Ordinal выполнялся в среднем в 10 раз быстрей, чем с CurrentCulture), а в том, что сравнение с помощью культур может вызвать синхронизацию потоков.

А вот небольшая история о том, как мы наткнулись на эту самую синхронизацию потоков в своём коде и начали исследовать эту проблему.

 Хоть у нас и сравниваются все строки в коде с помощью Ordinal, но мы забыли, что строки еще и сравниваются внутри SortedList с ключом строкой. Под большой нагрузкой это становится ощутимо, поэтому мы получили такой stack trace:
<source lang="cs">
Wait Time
2 of 1757: 2.8% (1.328s of 46.718s)

clr.dll!func@0x180008eb0+0x3a - [Unknown]:[Unknown]
clr.dll!func@0x180008e80+0x1e - [Unknown]:[Unknown]
clr.dll!func@0x180008d98+0x77 - [Unknown]:[Unknown]
clr.dll!func@0x180136390+0x2d - [Unknown]:[Unknown]
clr.dll!func@0x180131540+0x132 - [Unknown]:[Unknown]
clr.dll!func@0x18013520c+0x4c - [Unknown]:[Unknown]
mscorlib.ni.dll!func@0x644785619f0+0x170 - [Unknown]:[Unknown]
mscorlib.dll!System::Globalization::CompareInfo::Compare+0x9e - [Unknown]:[Unknown]
</source>
Не смотрите на то, что лишь 2.8% потрачено на синхронизацию из-за сравнения строк с культурами. Если вы посмотрите на Concurrency Visualizer, то увидите много потоков, часть из которых просто спит всё время жизни. Их создает ThreadPool и они не используются, но учитываются в общем времени синхронизации. В нашем случае понять, откуда там сваливается в лок сравнивающий строки поток, сложно без исходников нативной части, а исходники управляемой части заканчиваются <a href="http://referencesource.microsoft.com/#mscorlib/system/globalization/compareinfo.cs">этим</a>. Можно, конечно, попытаться изучить открытый код mono начиная <a href="https://github.com/mono/mono/blob/master/mcs/class/corlib/System.Globalization/CompareInfo.cs">отсюда</a>, переходя <a href="https://github.com/mono/mono/blob/master/mcs/class/corlib/Mono.Globalization.Unicode/SimpleCollator.cs">сюда</a>, а затем <a href="https://github.com/mono/mono/blob/97bb0ff149e498447c0e98901e4d2268cde7259d/mono/metadata/locales.c">сюда</a>, но в целом все мы понимаем, что mono все-таки не .net, и  это совсем другой код. Наши предположения таковы: либо там стоит где-то лок на доступ к культурам, либо в процессе сравнения выделяются объекты на куче, что в свою очередь тоже может вызвать лок. К сожалению, это лишь предположения, и если кто-то сможет сказать точно, что же там происходит, то с нас печеньки.

После того, как обнаружилась эта проблема, мы стали в конструкторы всех SortedList с ключом строкой передавать удобный <a href="http://msdn.microsoft.com/en-us/library/system.stringcomparer.ordinal(v=vs.110).aspx">StringComparer.Ordinal</a>, что еще немного улучшило производительность.

<h4>2. Еще немного о boxing: GetEnumerator() в foreach</h4>
foreach использует <a href="http://en.wikipedia.org/wiki/Duck_typing">duck typing</a>. То есть на самом деле, чтобы использовать объект в качестве цели для foreach, не нужно иметь реализацию <code>IEnumerable</code> или <code>IEnumerable<T></code>. <a href="http://msdn.microsoft.com/en-us/library/9yb8xew9.aspx">Достаточно</a> реализовать GetEnumerator(), MoveNext(), Reset() и Current.

Рассмотрим два простых и похожих метода:
<source lang="cs">
private static void IterateClass<T>(List<T> list)
{
	foreach (var item in list)
		Console.WriteLine(item);
}

private static void IterateInterface<T>(IEnumerable<T> enumerable)
{
	foreach (var item in enumerable)
		Console.WriteLine(item);
}
</source>
Вроде они должны делать одно и то же, но IL код подсказывает нам интересную деталь:
<source lang="cs">
.method private hidebysig static void  IterateClass<T>(class [mscorlib]System.Collections.Generic.List`1<!!T> list) cil managed
{
  .maxstack  1
  .locals init ([0] !!T item,
           [1] valuetype [mscorlib]System.Collections.Generic.List`1/Enumerator<!!T> CS$5$0000)
  IL_0000:  ldarg.0
  IL_0001:  callvirt   instance valuetype [mscorlib]System.Collections.Generic.List`1/Enumerator<!0> class [mscorlib]System.Collections.Generic.List`1<!!T>::GetEnumerator()
 ...

.method private hidebysig static void  IterateInterface<T>(class [mscorlib]System.Collections.Generic.IEnumerable`1<!!T> enumerable) cil managed
{
  .maxstack  1
  .locals init ([0] !!T item,
           [1] class [mscorlib]System.Collections.Generic.IEnumerator`1<!!T> CS$5$0000)
  IL_0000:  ldarg.0
  IL_0001:  callvirt   instance class [mscorlib]System.Collections.Generic.IEnumerator`1<!0> class [mscorlib]System.Collections.Generic.IEnumerable`1<!!T>::GetEnumerator()

...
</source>
Посмотрев внимательно, увидите, что для второго метода, в котором передается интерфейс, на стеке выделяется объект reference типа <code>IEnumerator`1<!!T></code>, а для первого метода создается value тип <code>List`1/Enumerator<!!T></code>.

Если делать enumerator, возвращаемый из GetEnumerator(), классом, то при каждом вызове foreach будет создаваться объект на куче. По этой причине все стандартные коллекции делают explicit реализацию интерфейсов <code>IEnumerable</code> и <code>IEnumerable<T></code>, а публичный метод GetEnumerator() возвращает структуру. Например, <a href="http://msdn.microsoft.com/en-us/library/b0yss765(v=vs.110).aspx"><code>public List<T>.Enumerator GetEnumerator()</code></a>. Но если ваш метод принимает в качестве параметра <code>IEnumerable<T></code> для итерации по нему (что и посоветует сделать Resharper, если это будет возможно) , то при вызове GetEnumerator() будет происходить boxing из-за того, что структура будет приводиться к интерфейсу IEnumerator. Либо же произойдет создание нового объекта на куче, если в коллекции не предусмотрен value тип итератор.

По этой причине есть три совета:
<ul>
	<li>Если вы делаете свою коллекцию, то не забывайте делать свою структуру enumerator'а, которая будет возвращаться для foreach. Если вы используете какую-то стандартную коллекцию внутри, то можно просто указывать тип итератора внутренней коллекции в качестве возвращаемого типа для метода GetEnumerator()</li>
	<li>Если есть возможность без вреда для внешнего кода иметь в качестве параметра конкретную коллекцию, а не интерфейс, то используйте ее, это сможет улучшить производительность foreach</li>
	<li>Если возможности иметь в качестве параметра конкретную коллекцию нет, можно, например, использовать IList и for вместо foreach</li>
</ul>
<h4>3. И еще немного о boxing: Перечисления в generic методах</h4>
В прошлой статье я много плохого написал о перечислениях. Мы стараемся использовать их пореже. Но если от них не избавиться, то есть в generic методах возможность получать значения перечисления без боксинга. <a href="http://social.msdn.microsoft.com/Forums/vstudio/en-US/d8ae015c-ccce-4e34-b848-a9c804a9465a/converting-between-generic-enum-and-intlong-without-boxing?forum=clr">Здесь</a>, например, описан способ генерации метода, который позволяет получать числовые значения перечисления без боксинга. У нас в лавке мы дописали этот метод, и теперь конвертируем спокойно value типы и generic параметры между собой. 

Есть лишь один нюанс: данный подход не работает на mono. Но в mono можно дописать необходимую функциональность, и это не очень большие изменения. Проблема кроется в файле <a href="https://github.com/mono/mono/blob/master/mcs/class/corlib/System/Delegate.cs#L156">Delegate.cs</a> в методе <code>private static bool return_type_match (Type delReturnType, Type returnType)</code>. После проверки <code>if (!returnType.IsValueType && delReturnType.IsAssignableFrom (returnType))</code> необходимо дописать еще одну, которая проверяет <a href="http://msdn.microsoft.com/en-us/library/system.type.getenumunderlyingtype(v=vs.110).aspx">Type.GetEnumUnderlyingType()</a> в случае, если один из типов <a href="http://msdn.microsoft.com/en-us/library/system.type.isenum(v=vs.110).aspx">Type.IsEnum</a>. У себя мы так и сделали. Возможно данные изменения попадут в скором времени и в основную ветку mono.

<h4>4. И ещё чуть-чуть о выделении памяти: постоянное создание делегатов</h4>
В заключение небольшая мелочь, о которой многие забывают. Предположим есть два метода:
<source lang="cs">
private static void Foo()
{
	Console.WriteLine("Foo");
}

private static void Execute(Action action)
{
	action();
}
</source>
Если сделать вызов <code>Execute(Foo)</code>, то мы получим следующий IL код:
<source lang="cs">
IL_009c:  ldftn      void HabraTests.Program::Foo()
IL_00a2:  newobj     instance void [mscorlib]System.Action::.ctor(object, native int)
IL_00a7:  call       void HabraTests.Program::Execute(class [mscorlib]System.Action)
</source>
То есть при каждом вызове создается объект. Если писать <code>eventName += methodName;</code>  или просто подставлять название метода в вызове принимающего делегат метода, то этим самым создается дополнительный объект. Когда это происходит редко, то в этом нет ничего страшного, но если такой код выполняется часто, то плодится большое количество объектов. Если у вас есть такие часто использующиеся участки кода,  то лучше сохранять делегат и передавать сохраненный объект, например, так:
<source lang="cs">
private static Action _fooAction;

public static void Main()
{
	_fooAction = Foo;

	Execute(_fooAction);
}
</source>
<source lang="cs">
IL_0011:  ldsfld     class [mscorlib]System.Action HabraTests.Program::_fooAction
IL_0016:  call       void HabraTests.Program::Execute(class [mscorlib]System.Action)
</source>

Вот и всё. 

Напоследок хотелось бы сказать пару слов о методике оптимизации, которой я стараюсь следовать. Большинство проблем кроется в алгоритмах и структурах данных. По этой причине я предпочитаю сначала решать проблемы производительности (да и вообще фиксить баги) аналитическим путем. Таким образом решаются фундаментальные проблемы, а не делается куча подпорок в коде для частных случаев. Только если решить аналитически не получается, то берусь за профайлер и дебаггер. 

Еще я придерживаюсь мнения, что если вы что-то решили прооптимизировать, то не стоит сразу пытаться оптимизировать в нём самом каждую мелочь. Лучше быстро набросать грубую модель и посмотреть, есть ли выигрыш в сравнении с предыдущим подходом, а потом уже вылизывать реализацию.

В комментариях к прошлой статье посоветовали замечательное расширение <a href="http://blog.jetbrains.com/dotnet/2014/06/06/heap-allocations-viewer-plugin/">Heap Allocations Viewer</a>. Оно, конечно, хорошо помогает увидеть все выделения памяти в вами написанном коде, но выделения памяти внутри сторонних библиотек там увидеть нельзя. Например, оно не покажет вам, что если использовать перечисление в качестве ключа для словаря, то будет происходить boxing. Отсюда еще одно правило оптимизации: всякие инструменты хорошо, но программист должен осознавать, что происходит в его коде с учетом внутреннего устройства всех сторонних библиотек, если  хочется выжать максимум.

P.S. Xочется поблагодарить парней, с которыми облетаем лавочные земли в поисках пропавших байтов и тактов, а также находим всякие такие забавные штуки из статьи. Спасибо вам!
